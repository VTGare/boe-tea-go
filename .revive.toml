ignoreGeneratedHeader = false
severity = "warning"
confidence = 0.8
errorCode = 0
warningCode = 0

[rule.blank-imports]
[rule.context-as-argument]
[rule.context-keys-type]
[rule.dot-imports]
[rule.error-return]
[rule.error-strings]
[rule.error-naming]
[rule.if-return]
[rule.increment-decrement]
[rule.var-naming]
[rule.var-declaration]
[rule.range]
[rule.receiver-naming]
[rule.time-naming]
[rule.unexported-return]
[rule.indent-error-flow]
[rule.errorf]
[rule.deep-exit]
[rule.defer]
[rule.duplicated-imports]
[rule.string-of-int]
[rule.unused-parameter]
[rule.unused-receiver]
[rule.use-any]

# The requirement is not met everywhere, but it should be turned into an error in the future.
[rule.cyclomatic]
    arguments = [20]

# Maximum allowed return values
[rule.function-result-limit]
  arguments = [3]
  severity = "error"

# Enforce maps and slices to be initialized with a make function.
[rule.enforce-map-style]
  arguments = ["make"]
[rule.enforce-slice-style]
  arguments = ["make"]

# In Go it is idiomatic to minimize nesting statements. For example: if ... else return should be converted to if not return.
[rule.early-return]
    arguments = ["preserveScope"]

# Disabled
[rule.package-comments]
    Disabled=true
[rule.exported]
    Disabled=true